//@author: a0088821x



	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandAdd.java
	 */

	@Override
	public String getCommandContent(){
		return task.getTitle();
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandAdd.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandClear.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}
}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandClear.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandClearDone.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandClearDone.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandDelete.java
	 */

	@Override
	public String getCommandContent(){
		return task.getTitle();
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandDelete.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandDone.java
	 */

	@Override
	public String getCommandContent() {
		return task.getTitle();
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandDone.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandEdit.java
	 */

	@Override
	public String getCommandContent() {
		return String.format(EDIT_COMMAND_CONTENT, editIndex, task.getTitle());
	}
}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandEdit.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandExit.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandExit.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandInvalid.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandInvalid.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandLoad.java
	 */

	@Override
	public String getCommandContent() {
		return jsonName;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandLoad.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandMove.java
	 */

	@Override
	public String getCommandContent() {
		return String.format(MOVE_COMMAND_CONTENT, origin, destination);
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandMove.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandRecur.java
	 */

	@Override
	public String getCommandContent() {
		// TODO Auto-generated method stub
		return String.format(RECUR_COMMAND_CONTENT, task.getTitle(), frequency.toLowerCase(), numberToStop);
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandRecur.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandRemind.java
	 */

	@Override
	public String getCommandContent(){
		return task.getTitle();
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandRemind.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandSearch.java
	 */

	@Override
	public String getCommandContent() {
		return searchString;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandSearch.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandShowAll.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandShowAll.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandUndo.java
	 */

	@Override
	public String getCommandContent(){
		return EMPTY_STRING;
	}

}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\command\CommandUndo.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\DoneUI.java
	 */

	@Override
	public void start(Stage primaryStage) {
		try {
			final FXMLLoader loader = new FXMLLoader(getClass().getResource(FXML_FILE));
	        AnchorPane anchorPane = (AnchorPane) loader.load();
	        assert anchorPane != null;
	        Scene scene = new Scene(anchorPane);
	        
	        primaryStage.getIcons().add(new Image(getClass().getResourceAsStream(ICON_FILE)));
	        primaryStage.setTitle(String.format(STAGE_TITLE, logicFacade.getJsonName().substring(7))); 
	        primaryStage.setScene(scene);
	        primaryStage.setResizable(false);
	        primaryStage.show();
	        
	        UIController controller = loader.getController();
	        assert controller != null;
	        controller.setStage(primaryStage);
	        
	        Notifications.create().text(String.format(LOAD_SUCCESS_MESSAGE, logicFacade.getJsonName().substring(7))).showInformation();
	        uiLogger.log(Level.INFO, START_LOG_MESSAGE);
	        
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\DoneUI.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\result\ExecutionResult.java
	 */

package com.done.result;

import com.done.command.Command.CommandType;

public class ExecutionResult {
	private CommandType commandType;
	private boolean isSuccessful;
	private String commandContent;
	
	public ExecutionResult(CommandType commandType, boolean isSuccessful,
			String commandContent) {
		assert isSuccessful;
		this.commandType = commandType;
		this.isSuccessful = isSuccessful;
		this.commandContent = commandContent;
	}
	
	public ExecutionResult(CommandType commandType, boolean isSuccessful){
		assert (!isSuccessful);
		this.commandType = commandType;
		this.isSuccessful = isSuccessful;
		this.commandContent = null;
	}

	public CommandType getCommandType() {
		return commandType;
	}

	public void setCommandType(CommandType commandType) {
		this.commandType = commandType;
	}

	public boolean isSuccessful() {
		return isSuccessful;
	}

	public void setSuccessful(boolean isSuccessful) {
		this.isSuccessful = isSuccessful;
		if(!isSuccessful){
			commandContent = null;
		}
	}

	public String getCommandContent() {
		return commandContent;
	}

	public void setCommandContent(String commandContent) {
		assert isSuccessful;
		this.commandContent = commandContent;
	}
}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\result\ExecutionResult.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\UIController.java
	 */

	public UIController(){
		logicFacade = new LogicFacade();
	}

	@FXML
	public void initialize() {
		display();
		commandField.setOnAction((event) -> {
			processInput();
		});
	}
	
	public void setStage(Stage stage) {
         this.primaryStage = stage;
    }
	
	private void processInput(){
		String userCommand = commandField.getText();
		if(!userCommand.equals(EMPTY_STRING)){
			processCommand(userCommand);	
		}
		
	}
	
	private void processCommand(String userCommand){
		
		ExecutionResult executionResult = logicFacade.getExecutionResult(userCommand);
		CommandType currCommandType = executionResult.getCommandType();
		String commandContent = executionResult.getCommandContent();
		
		switch(currCommandType){
			case ADD:				
				showAdd(executionResult.isSuccessful(), commandContent);
				break;
			case DELETE:				
				showDelete(executionResult.isSuccessful(), commandContent);
				break;
			case EDIT:
				showEdit(executionResult.isSuccessful(), commandContent);
				break;
			case LOAD:
				showLoad(executionResult.isSuccessful(), commandContent);
				break;
			case CLEAR:
				showClear(executionResult.isSuccessful());
				break;
			case MOVE:
				showMove(executionResult.isSuccessful(), commandContent);
				break;
			case SEARCH:
				showSearch(executionResult.isSuccessful(), commandContent);
				break;
			case SHOWALL:
				showShowAll();
				break;
			case RECUR:
				showRecur(executionResult.isSuccessful(), commandContent);
				break;
			case REMIND:
				showRemind(executionResult.isSuccessful(), commandContent);
				break;
			case UNDO:
				showUndo(executionResult.isSuccessful(), commandContent);
				break;
			case DONE:
				showDone(executionResult.isSuccessful(), commandContent);
				break;
			case CLEARDONE:
				showClearDone(executionResult.isSuccessful());
				break;
			case EXIT:
				System.exit(0);
				break;
			default:	
				showInvalidCommand();
				break;
		}
		commandField.clear();
	}
	
	private void showAdd(boolean isSuccessful, String commandContent) {
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWADD_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWADD_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWADD_LOG_MESSAGE);
	}
	
	private void showDelete(boolean isSuccessful, String commandContent) {
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWDELETE_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWDELETE_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWDELETE_LOG_MESSAGE);
	}
	
	private void showEdit(boolean isSuccessful, String commandContent) {
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWEDIT_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWEDIT_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWEDIT_LOG_MESSAGE);
	}
	
	private void showLoad(boolean isSuccessful, String commandContent){
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWLOAD_SUCCESS_MESSAGE, commandContent)).showInformation();
			primaryStage.setTitle(String.format(SHOWLOAD_STAGE_TITLE, logicFacade.getJsonName().substring(7)));
		} else{
			Notifications.create().text(SHOWLOAD_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWLOAD_LOG_MESSAGE);
	}
	
	private void showClear(boolean isSuccessful) {
		if(isSuccessful){
			Notifications.create().text(SHOWCLEAR_SUCCESS_MESSAGE).showInformation();
		} else{
			Notifications.create().text(SHOWCLEAR_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWCLEAR_LOG_MESSAGE);
	}
	
	private void showMove(boolean isSuccessful, String commandContent){
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWMOVE_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWMOVE_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWMOVE_LOG_MESSAGE);
	}
	
	private void showSearch(boolean isSuccessful, String commandContent){
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWSEARCH_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{	
			Notifications.create().text(SHOWSEARCH_ERROR_MESSAGE).showError();
		}
		displaySearches();
		uiLogger.log(Level.INFO, SHOWSEARCH_LOG_MESSAGE);
	}
	
	private void showShowAll(){
		Notifications.create().text(SHOWSHOWALL_SUCCESS_MESSAGE).showInformation();
		display();
		uiLogger.log(Level.INFO, SHOWSHOWALL_LOG_MESSAGE);
	}
	
	private void showRecur(boolean isSuccessful, String commandContent){
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWRECUR_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWRECUR_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWRECUR_LOG_MESSAGE);
	}
	
	private void showRemind(boolean isSuccessful, String commandContent){
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWREMIND_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWREMIND_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWREMIND_LOG_MESSAGE);
	}

	private void showUndo(boolean isSuccessful, String commandContent)  {
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWUNDO_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWUNDO_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWUNDO_LOG_MESSAGE);
	}
	
	private void showDone(boolean isSuccessful, String commandContent) {
		if(isSuccessful){
			Notifications.create().text(String.format(SHOWDONE_SUCCESS_MESSAGE, commandContent)).showInformation();
		} else{
			Notifications.create().text(SHOWDONE_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWDONE_LOG_MESSAGE);
	}
	
	private void showClearDone(boolean isSuccessful) {
		if(isSuccessful){
			Notifications.create().text(SHOWCLEARDONE_SUCCESS_MESSAGE).showInformation();
		} else{
			Notifications.create().text(SHOWCLEARDONE_ERROR_MESSAGE).showError();
		}
		display();
		uiLogger.log(Level.INFO, SHOWCLEARDONE_LOG_MESSAGE);
	}

	private void showInvalidCommand() {
		Notifications.create().text(SHOWINVALIDCOMMAND_ERROR_MESSAGE).showError();
		uiLogger.log(Level.INFO, SHOWINVALIDCOMMAND_LOG_MESSAGE);
	}
	

	private void display() {
		createDisplayTable();
		strikethroughDoneRows();
	}

	private void createDisplayTable() {
		List<Done> tasks = logicFacade.getTasks();
		ObservableList<Done> tableTasks = FXCollections.observableArrayList(tasks);		
		tableViewTasks.setItems(tableTasks);
		buildTableColumns();
	}

	private void buildTableColumns() {
		TableColumn<Done,Integer> idCol = new TableColumn<Done,Integer>(ID_COL_TEXT);
		idCol.setCellValueFactory(new PropertyValueFactory(ID_COL_VALUEFACT));
		idCol.setPrefWidth(ID_COL_WIDTH);
		idCol.setResizable(false);
		
		TableColumn<Done,String> titleCol = new TableColumn<Done,String>(TITLE_COL_TEXT);
		titleCol.setCellValueFactory(new PropertyValueFactory(TITLE_COL_VALUEFACT));
		titleCol.setPrefWidth(TITLE_COL_WIDTH);
		titleCol.setResizable(false);
		
		TableColumn<Done,String> startTimeCol = new TableColumn<Done,String>(STARTTIME_COL_TEXT);
		startTimeCol.setCellValueFactory(new PropertyValueFactory(STARTTIME_COL_VALUEFACT));
		startTimeCol.setPrefWidth(STARTTIME_COL_WIDTH);
		startTimeCol.setResizable(false);
		
		TableColumn<Done,String> endTimeCol = new TableColumn<Done,String>(ENDTIME_COL_TEXT);
		endTimeCol.setCellValueFactory(new PropertyValueFactory(ENDTIME_COL_VALUEFACT));
		setCellFactoryEndTimeCol(endTimeCol);
		endTimeCol.setPrefWidth(ENDTIME_COL_WIDTH);
		endTimeCol.setResizable(false);
		
		TableColumn<Done,String> deadlineCol = new TableColumn<Done,String>(DEADLINE_COL_TEXT);
		deadlineCol.setCellValueFactory(new PropertyValueFactory(DEADLINE_COL_VALUEFACT));
		setCellFactoryDeadlineCol(deadlineCol);
		deadlineCol.setPrefWidth(DEADLINE_COL_WIDTH);
		deadlineCol.setResizable(false);
		
		tableViewTasks.getColumns().setAll(idCol, titleCol, startTimeCol, endTimeCol, deadlineCol);
	}

	private void setCellFactoryDeadlineCol(TableColumn<Done, String> deadlineCol) {
		deadlineCol.setCellFactory(new Callback<TableColumn<Done,String>,TableCell<Done,String>>(){
			@Override
		    public TableCell<Done, String> call(TableColumn<Done, String> tableColumn) {
		        final TableCell<Done, String> cell = new TableCell<Done, String>() {
		            @Override
		            protected void updateItem(final String item, boolean empty)
		            {
		                super.updateItem(item, empty);
		                if(empty){
		                	this.setText(EMPTY_STRING);
		                } else{
		                	if(item != null && item.length() > ENDTIME_LENGTH){
		                		this.setText(item); 
		                	} else{
		                		this.setText(EMPTY_STRING);
		                	}
		                }
		            }
		        };
		        return cell;
		    }
		});
	}

	private void setCellFactoryEndTimeCol(TableColumn<Done, String> endTimeCol) {
		endTimeCol.setCellFactory(new Callback<TableColumn<Done,String>,TableCell<Done,String>>(){
			@Override
		    public TableCell<Done, String> call(TableColumn<Done, String> tableColumn) {
		        final TableCell<Done, String> cell = new TableCell<Done, String>() {
		            @Override
		            protected void updateItem(final String item, boolean empty)
		            {
		                super.updateItem(item, empty);
		                if(empty){
		                	this.setText(EMPTY_STRING);
		                } else{
		                	if(item != null && item.length() == ENDTIME_LENGTH){
		                		this.setText(item); 
		                	} else{
		                		this.setText(EMPTY_STRING);
		                	}
		                }
		            }
		        };
		        return cell;
		    }
		});
	}
	
	private void strikethroughDoneRows() {
		tableViewTasks.setRowFactory(new Callback<TableView<Done>, TableRow<Done>>() {
	        @Override
	        public TableRow<Done> call(TableView<Done> tableView) {
	            final TableRow<Done> row = new TableRow<Done>() {
	                @Override
	                protected void updateItem(Done task, boolean empty){
	                    super.updateItem(task, empty);
	                    if(task == null || empty){
	                    	 getStyleClass().removeAll(Collections.singleton(STYLECLASS_DONEROW));
	                    } else{
		                    if(task.isCompleted()){
		                    	if (!getStyleClass().contains(STYLECLASS_DONEROW)) {
		                            getStyleClass().add(STYLECLASS_DONEROW);
		                    	}
		                    } else{
		                    	 getStyleClass().removeAll(Collections.singleton(STYLECLASS_DONEROW));
		                    }
	                    }
	                   
	                }
	            };
	            return row;
	        }
	    });
		if(!tableViewTasks.getColumns().get(0).getStyleClass().contains(STYLECLASS_FIRSTCOLUMN)){
			tableViewTasks.getColumns().get(0).getStyleClass().add(STYLECLASS_FIRSTCOLUMN);
		}
	}
	
	private void displaySearches() {
		createDisplaySearchesTable();
		strikethroughDoneRows();
	}

	private void createDisplaySearchesTable() {
		List<Done> tasks = logicFacade.getSearchResult();
		ObservableList<Done> tableTasks = FXCollections.observableArrayList(tasks);
		tableViewTasks.setItems(tableTasks);
		buildTableColumns();
	}
	
	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\src\com\done\UIController.java





	/**
	 * origin: C:\Users\Jerry\eclipse_workspace\CS2103Project\test\com\done\result\TestExecutionResult.java
	 */

	@Test
	public void testExecutionResult() {
		ExecutionResult result = new ExecutionResult(CommandType.ADD, true, "meet John at 6");
		
		//test the getters
		assertEquals(result.getCommandType(), CommandType.ADD);
		assertEquals(result.isSuccessful(), true);
		assertEquals(result.getCommandContent(), "meet John at 6");
		
		//test the setters
		result.setCommandType(CommandType.DELETE);
		assertEquals(result.getCommandType(), CommandType.DELETE);
		result.setSuccessful(false);
		assertEquals(result.isSuccessful(),false);
		assertEquals(result.getCommandContent(), null); //if isSuccessful is false, commandContent must be null
		result.setSuccessful(true); //set isSuccessful back to true
		result.setCommandContent("finish CS2103 homework");
		assertEquals(result.getCommandContent(), "finish CS2103 homework");
	}
}

	// End of segment: C:\Users\Jerry\eclipse_workspace\CS2103Project\test\com\done\result\TestExecutionResult.java





